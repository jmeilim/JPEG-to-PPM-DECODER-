#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
# Commentaire : Ce chunk a été crée grâce à l'icone "+C"
# Calcul du logarithme de 3
log(3)
# réponse attendue : 1.098612
# Calcul de la somme 1 + 1
# réponse attendue : 2
# x contient 100 variables aléatoires uniformément réparties entre 0 et 1
x <- runif(100)
mean(x)
# la fonction mean() calcule la moyenne du vecteur
# utiliser help(mean) dans la console
# reponse attendue : environ 0.5
# voir le chemin vers mon répertoire local
getwd()
# voir le chemin vers mon répertoire local
getwd()
setwd()
# voir le chemin vers mon répertoire local
#getwd()
setwd()
# voir le chemin vers mon répertoire local
#getwd()
setwd(dir)
# voir le chemin vers mon répertoire local
getwd()
#setwd(dir)
# voir le chemin vers mon répertoire local
getwd()
history()
#setwd(dir)
# voir le chemin vers mon répertoire local
getwd()
R history()
# voir le chemin vers mon répertoire local
#getwd()
R history()
# voir le chemin vers mon répertoire local
#getwd()
history()
#setwd(dir)
# voir le contenu de mon environnement
ls()
# Générer un échantillon aléatoire en utilisant les probabilités
echantillon <- sample(1:length(probabilites),
size =4 ,
replace =TRUE,
prob =probabilites )
# Afficher une table des valeurs de l'échantillon
table()
# Afficher une table des valeurs de l'échantillon
table(echantillon)
# 10 premières valeurs de l'échantillon.
echantillon[1:10]
# Générer un échantillon aléatoire en utilisant les probabilités
echantillon <- sample(1:length(probabilites),
size =100,
replace =TRUE,
prob =probabilites )
# Afficher une table des valeurs de l'échantillon
table(echantillon)
# 10 premières valeurs de l'échantillon.
echantillon[1:10]
# partitionne la fenêtre graphique en une ligne et deux colonnes
par(mfrow = c(1,2))
# diagramme sectoriel. Un camembert est une "tarte" en anglais (pie)
pie(table(echantillon),
col = c("red3", "darkblue", "green4", "gold"),
main = "Probabilités empiriques")
# diagramme en bâtons
barplot(table(echantillon),
col = c("red3", "darkblue", "green4", "gold"),
main = "Effectifs empiriques", las = 1)
# Afficher une table des valeurs de l'échantillon
table(echantillon)
# Générer un échantillon aléatoire en utilisant les probabilités
echantillon <- sample(1:length(probabilites),
size =10000,
replace =TRUE,
prob =probabilites )
# Afficher une table des valeurs de l'échantillon
table(echantillon)
# On utilise is.numeric, class, mode
is.numeric(echantillon)
# On utilise is.numeric, class, mode
class(echantillon)
# Longueur
length(echantillon)
# Première valeur
# Nouveau vecteur (on supprime des éléments avec le signe "-")
# Longueur
# Générer un échantillon aléatoire en utilisant les probabilités
echantillon <- sample(1:length(probabilites),
size =100,
replace =TRUE,
prob =probabilites )
# Longueur
length(echantillon)
# Première valeur
# Nouveau vecteur (on supprime des éléments avec le signe "-")
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon[0]
# Nouveau vecteur (on supprime des éléments avec le signe "-")
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon(0)
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur (on supprime des éléments avec le signe "-")
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon[54]
# Nouveau vecteur (on supprime des éléments avec le signe "-")
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon[53]
# Nouveau vecteur (on supprime des éléments avec le signe "-")
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur (on supprime des éléments avec le signe "-")
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur
echantillon.pop()
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur
echantillon[100]
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur
echantillon[100]
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur
echantillon.remove(1)
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur
remove(echantillon, pos=1)
# Longueur
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Longueur
length(echantillon)
# Générer un échantillon aléatoire en utilisant les probabilités
echantillon <- sample(1:length(probabilites),
size =100,
replace =TRUE,
prob =probabilites )
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur
# Longueur
## condition logique
condition = (echantillon > 2)
condition
# Classe de l'objet condition
logical
# Longueur
# nombre de fois ou la condition est réalisée (sum)
# somme des valeurs de l'échantillon vérifiant la condition logique.
# Afficher une table des valeurs de l'échantillon
table(echantillon)
# initialisation de la somme
nb <- 0
n <- length(echantillon)
# calcul iteratif de la somme
for (i in 1:n){   # 1:n est un vecteur de valeurs de 1 à n
if (echantillon[i] > 2){
nb <- nb +  echantillon[i]
}
}
print(nb) # on pourrait simplement écrire "nb"
# Afficher une table des valeurs de l'échantillon
table(echantillon)
# Afficher une table des valeurs de l'échantillon
table(echantillon)
# Afficher une table des valeurs de l'échantillon
table(echantillon)
mes_betes
mes_betes <- list(animal = c("chat", "chien"),
sex = c("M", "F"),
age = c(2, 8),
vaccine = c(TRUE, TRUE))
mes_betes
mes_betes$animal
mes_betes$animal[1]
# remplacer "chien" par "raton laveur"
mes_betes$animal[2]='raton laveur'
# verification
# remplacer "chien" par "raton laveur"
mes_betes$animal[2]='raton laveur'
# verification
mes_betes
# creation ou conversion de l'objet `mes_betes`
data.frame()
# verification du format
# les noms sont donnés aux colonnes du tableau de données
mes_betes
colnames(mes_betes)
# creation ou conversion de l'objet `mes_betes`
data.frame(mes_betes)
# verification du format
# les noms sont donnés aux colonnes du tableau de données
mes_betes
colnames(mes_betes)
#install.packages("worldfootballR")
#library(worldfootballR)
#install.packages("worldfootballR")
#library(worldfootballR)
install.packages("worldfootballR")
library(worldfootballR)
install.packages("worldfootballR")
library(worldfootballR)
***
# initialisation de la somme
nb <- 0
n <- length(echantillon)
# calcul iteratif de la somme
for (i in 1:n){   # 1:n est un vecteur de valeurs de 1 à n
if (echantillon[i] > 2){
nb <- nb +  echantillon[i]
}
}
print(nb) # on pourrait simplement écrire "nb"
install.packages("worldfootballR")
#library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
ls
# voir le contenu de mon environnement
ls()
pwd
pwd()
install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
install.packages("worldfootballR")
library(worldfootballR)
install.packages("worldfootballR")
install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
install.packages("worldfootballR")
#library(worldfootballR)
#install.packages("worldfootballR")
library(worldfootballR)
install.packages("worldfootballR")
#library(worldfootballR)
install.packages("worldfootballR")
#library(worldfootballR)
# remplacer "chien" par "raton laveur"
mes_betes$animal[2]='raton laveur'
# verification
mes_betes
install.packages("worldfootballR")
#library(worldfootballR)
---
title: "Introduction au langage R"
# Cette commande permet d'afficher le code des chunks dans le document généré par knit.
knitr::opts_chunk$set(echo = TRUE)
# Commentaire : Ce chunk a été crée grâce à l'icone "+C"
# Calcul du logarithme de 3
# réponse attendue : 1.098612
# Calcul de la somme 1 + 1
# réponse attendue : 2
# Commentaire : Ce chunk a été crée grâce à l'icone "+C"
# Calcul du logarithme de 3
log(3)
# réponse attendue : 1.098612
# Calcul de la somme 1 + 1
1 + 1
# réponse attendue : 2
# x contient 100 réalisations de variables aléatoires indépendantes de loi uniforme sur [0,1].
x <- runif(100)
# la fonction mean() calcule la moyenne du vecteur
# utiliser help(mean) dans la console
# reponse attendue : environ 0.5
# x contient 100 réalisations de variables aléatoires indépendantes de loi uniforme sur [0,1].
x <- runif(100)
# la fonction mean() calcule la moyenne du vecteur
# utiliser help(mean) dans la console
# reponse attendue : environ 0.5
mean(x)
# voir le chemin vers mon répertoire local
# getwd()
# voir le contenu de mon environnement
# ls()
# Définition des probabilités
# Remplacez ces valeurs par les probabilités de votre choix
probabilites <- c(0.2, 0.3, 0.1, 0.4)
# Générer un échantillon aléatoire en utilisant les probabilités
#echantillon <- sample(1:length(probabilites),
#                      size = ,
#                      replace = ,
#                      prob = )
# Générer un échantillon aléatoire en utilisant les probabilités
echantillon <- sample(1:length(probabilites),
size = 100,
replace = TRUE,
prob = probabilites)
# Afficher une table des valeurs de l'échantillon
# table()
# Afficher une table des valeurs de l'échantillon
table(echantillon)
# 10 premières valeurs de l'échantillon.
echantillon[1:10]
# partitionne la fenêtre graphique en une ligne et deux colonnes
par(mfrow = c(1,2))
# diagramme sectoriel. Un camembert est une "tarte" en anglais (pie)
pie(table(echantillon),
col = c("red3", "darkblue", "green4", "gold"),
main = "Probabilités empiriques")
# diagramme en bâtons
barplot(table(echantillon),
col = c("red3", "darkblue", "green4", "gold"),
main = "Effectifs empiriques", las = 1)
# On utilise is.numeric, class, mode
# On utilise is.numeric, class, mode
is.numeric(echantillon)
# On utilise is.numeric, class, mode
mode(echantillon)
# On utilise is.numeric, class, mode
class(echantillon)
# Longueur
# Première valeur
# Nouveau vecteur (on supprime des éléments avec le signe "-")
# Longueur
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur (on supprime des éléments avec le signe "-")
new.echantillon = echantillon[-1]
# Longueur
length(new.echantillon)
## condition logique
condition = (echantillon > 2)
condition
# Classe de l'objet condition
# Longueur
# nombre de fois ou la condition est réalisée (sum)
# somme des valeurs de l'échantillon vérifiant la condition logique.
# Classe de l'objet condition
class(condition)
mode(condition)
# Longueur
length(condition)
# nombre de fois ou la condition est réalisée (sum)
sum(condition)
# somme des valeurs de l'échantillon vérifiant la condition logique
sum(echantillon[condition])
# initialisation de la somme
nb <- 0
n <- length(echantillon)
# calcul iteratif de la somme
for (i in 1:n){   # 1:n est un vecteur de valeurs de 1 à n
if (echantillon[i] > 2){
nb <- nb +  echantillon[i]
}
}
print(nb) # on pourrait simplement écrire "nb"
mes_betes <- list(animal = c("chat", "chien"),
sex = c("M", "F"),
age = c(2, 8),
vaccine = c(TRUE, TRUE))
mes_betes
mes_betes$animal
mes_betes$animal[1]
# remplacer "chien" par "raton laveur"
# verification
# remplacer "chien" par "raton laveur"
mes_betes$animal[2] <- "raton laveur"
mes_betes$animal
# creation ou conversion de l'objet `mes_betes`
# verification du format
# les noms sont donnés aux colonnes du tableau de données
mes_betes
#colnames(mes_betes)
# creation ou conversion de l'objet `mes_betes`
mes_betes <- as.data.frame(mes_betes)
# verification du format
is.data.frame(mes_betes)
# les noms sont donnés aux colonnes du tableau de données
mes_betes
colnames(mes_betes)
#install.packages("worldfootballR")
library(worldfootballR)
# On utilise is.numeric, class, mode
mode(echantillon)
# Longueur
length(echantillon)
# Première valeur
echantillon[1]
# Nouveau vecteur (on supprime des éléments avec le signe "-")
new.echantillon = echantillon[-1]
# Longueur
length(new.echantillon)
# Classe de l'objet condition
class(condition)
mode(condition)
# Longueur
length(condition)
# nombre de fois ou la condition est réalisée (sum)
sum(condition)
# somme des valeurs de l'échantillon vérifiant la condition logique
sum(echantillon[condition])
#
theta = seq(0, 11)
res = NULL
for (seuil in theta) {
positif =  breast_cancer[,"Cell.size"] > seuil
res = rbind(res, c(mean(positif[BreastCancer$Class == "benign"]),
mean(positif[BreastCancer$Class == "malignant"])))
}
#
#  theta = seq(0, 11)
#  res = NULL
#  for (seuil in theta) {
#    positif =  remplace_moi > seuil
#    res = rbind(res, c( taux_de_faux_positif_a_definir,#
#           taux_de_vrai_positif_a_definir))
#  }
#  plot(res,
#       lwd = 4, type = "l",
#       col = "darkblue",
#       xlab ="TFP", ylab = "TVP", main = "ROC")
#   points(res,
#       pch = 19,
#       col = "darkblue")
#  abline(0,1)
# comment 1: definition du test > 4
positif =  breast_cancer[,"Cell.size"] > 4
plot(BreastCancer$Class[condition],
col = c("orange", "black"),
las = 1,
ylab = "Nombre de patientes")
